//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace OMGITWebServices
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGLoginData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGLoginData : object
    {
        
        private bool ActionFlagField;
        
        private string AltitudeField;
        
        private bool CreateAuthTokenField;
        
        private int ExtendableBitMaskField;
        
        private string LatitudeField;
        
        private string LongitudeField;
        
        private string MobilePlatformField;
        
        private string OMGAppIDField;
        
        private string PasswordField;
        
        private string PhoneIdentifierField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActionFlag
        {
            get
            {
                return this.ActionFlagField;
            }
            set
            {
                this.ActionFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Altitude
        {
            get
            {
                return this.AltitudeField;
            }
            set
            {
                this.AltitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CreateAuthToken
        {
            get
            {
                return this.CreateAuthTokenField;
            }
            set
            {
                this.CreateAuthTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Latitude
        {
            get
            {
                return this.LatitudeField;
            }
            set
            {
                this.LatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Longitude
        {
            get
            {
                return this.LongitudeField;
            }
            set
            {
                this.LongitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobilePlatform
        {
            get
            {
                return this.MobilePlatformField;
            }
            set
            {
                this.MobilePlatformField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OMGAppID
        {
            get
            {
                return this.OMGAppIDField;
            }
            set
            {
                this.OMGAppIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneIdentifier
        {
            get
            {
                return this.PhoneIdentifierField;
            }
            set
            {
                this.PhoneIdentifierField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGReturnMessage", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGReturnMessage : object
    {
        
        private string AuthTokenField;
        
        private int ErrorCodeField;
        
        private string ErrorMessageField;
        
        private int ExtendableBitMaskField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken
        {
            get
            {
                return this.AuthTokenField;
            }
            set
            {
                this.AuthTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success
        {
            get
            {
                return this.SuccessField;
            }
            set
            {
                this.SuccessField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGInstallationData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGInstallationData : object
    {
        
        private string DeviceTokenField;
        
        private int ExtendableBitMaskField;
        
        private string OperatingSystemField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceToken
        {
            get
            {
                return this.DeviceTokenField;
            }
            set
            {
                this.DeviceTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGAdminTestSendData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGAdminTestSendData : object
    {
        
        private int ExtendableBitMaskField;
        
        private string MessageField;
        
        private string OperatingSystemField;
        
        private string TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag
        {
            get
            {
                return this.TagField;
            }
            set
            {
                this.TagField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGAuthTokenData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGAuthTokenData : object
    {
        
        private bool ActionFlagField;
        
        private string AuthTokenField;
        
        private int ExtendableBitMaskField;
        
        private string MobilePlatformField;
        
        private string OMGAppIDField;
        
        private string PhoneIdentifierField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActionFlag
        {
            get
            {
                return this.ActionFlagField;
            }
            set
            {
                this.ActionFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken
        {
            get
            {
                return this.AuthTokenField;
            }
            set
            {
                this.AuthTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobilePlatform
        {
            get
            {
                return this.MobilePlatformField;
            }
            set
            {
                this.MobilePlatformField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OMGAppID
        {
            get
            {
                return this.OMGAppIDField;
            }
            set
            {
                this.OMGAppIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneIdentifier
        {
            get
            {
                return this.PhoneIdentifierField;
            }
            set
            {
                this.PhoneIdentifierField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGLocationNotificationMessage", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGLocationNotificationMessage : object
    {
        
        private int ClinicIDField;
        
        private string MessageField;
        
        private string SubjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClinicID
        {
            get
            {
                return this.ClinicIDField;
            }
            set
            {
                this.ClinicIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject
        {
            get
            {
                return this.SubjectField;
            }
            set
            {
                this.SubjectField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGPushNotificationSendData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGPushNotificationSendData : object
    {
        
        private int ExtendableBitMaskField;
        
        private string MessageField;
        
        private string OperatingSystemField;
        
        private string TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag
        {
            get
            {
                return this.TagField;
            }
            set
            {
                this.TagField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IOMGITService")]
public interface IOMGITService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Login", ReplyAction="http://tempuri.org/IOMGITService/LoginResponse")]
    System.IAsyncResult BeginLogin(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndLogin(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Logout", ReplyAction="http://tempuri.org/IOMGITService/LogoutResponse")]
    System.IAsyncResult BeginLogout(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndLogout(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/RegisterForNotifications", ReplyAction="http://tempuri.org/IOMGITService/RegisterForNotificationsResponse")]
    System.IAsyncResult BeginRegisterForNotifications(OMGITWebServices.OMGInstallationData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndRegisterForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/TestSendNotification", ReplyAction="http://tempuri.org/IOMGITService/TestSendNotificationResponse")]
    System.IAsyncResult BeginTestSendNotification(OMGITWebServices.OMGAdminTestSendData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndTestSendNotification(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/ValidateAuthenticationToken", ReplyAction="http://tempuri.org/IOMGITService/ValidateAuthenticationTokenResponse")]
    System.IAsyncResult BeginValidateAuthenticationToken(OMGITWebServices.OMGAuthTokenData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndValidateAuthenticationToken(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AddLogMessageTickerApp", ReplyAction="http://tempuri.org/IOMGITService/AddLogMessageTickerAppResponse")]
    System.IAsyncResult BeginAddLogMessageTickerApp(string logmessage, string msgdetail, System.AsyncCallback callback, object asyncState);
    
    void EndAddLogMessageTickerApp(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetRecentMessages", ReplyAction="http://tempuri.org/IOMGITService/GetRecentMessagesResponse")]
    System.IAsyncResult BeginGetRecentMessages(System.AsyncCallback callback, object asyncState);
    
    string[] EndGetRecentMessages(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetValidSendLocations", ReplyAction="http://tempuri.org/IOMGITService/GetValidSendLocationsResponse")]
    System.IAsyncResult BeginGetValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, string> EndGetValidSendLocations(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/SendOMGNotificationToLocations", ReplyAction="http://tempuri.org/IOMGITService/SendOMGNotificationToLocationsResponse")]
    System.IAsyncResult BeginSendOMGNotificationToLocations(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndSendOMGNotificationToLocations(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AcknowledgeNotification", ReplyAction="http://tempuri.org/IOMGITService/AcknowledgeNotificationResponse")]
    System.IAsyncResult BeginAcknowledgeNotification(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndAcknowledgeNotification(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/SendNotification", ReplyAction="http://tempuri.org/IOMGITService/SendNotificationResponse")]
    System.IAsyncResult BeginSendNotification(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndSendNotification(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IOMGITServiceChannel : IOMGITService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class RegisterForNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public RegisterForNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestSendNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public TestSendNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ValidateAuthenticationTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public ValidateAuthenticationTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetRecentMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetRecentMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetValidSendLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetValidSendLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, string> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SendOMGNotificationToLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public SendOMGNotificationToLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AcknowledgeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AcknowledgeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SendNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public SendNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class OMGITServiceClient : System.ServiceModel.ClientBase<IOMGITService>, IOMGITService
{
    
    private BeginOperationDelegate onBeginLoginDelegate;
    
    private EndOperationDelegate onEndLoginDelegate;
    
    private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
    
    private BeginOperationDelegate onBeginLogoutDelegate;
    
    private EndOperationDelegate onEndLogoutDelegate;
    
    private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
    
    private BeginOperationDelegate onBeginRegisterForNotificationsDelegate;
    
    private EndOperationDelegate onEndRegisterForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onRegisterForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginTestSendNotificationDelegate;
    
    private EndOperationDelegate onEndTestSendNotificationDelegate;
    
    private System.Threading.SendOrPostCallback onTestSendNotificationCompletedDelegate;
    
    private BeginOperationDelegate onBeginValidateAuthenticationTokenDelegate;
    
    private EndOperationDelegate onEndValidateAuthenticationTokenDelegate;
    
    private System.Threading.SendOrPostCallback onValidateAuthenticationTokenCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddLogMessageTickerAppDelegate;
    
    private EndOperationDelegate onEndAddLogMessageTickerAppDelegate;
    
    private System.Threading.SendOrPostCallback onAddLogMessageTickerAppCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetRecentMessagesDelegate;
    
    private EndOperationDelegate onEndGetRecentMessagesDelegate;
    
    private System.Threading.SendOrPostCallback onGetRecentMessagesCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetValidSendLocationsDelegate;
    
    private EndOperationDelegate onEndGetValidSendLocationsDelegate;
    
    private System.Threading.SendOrPostCallback onGetValidSendLocationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginSendOMGNotificationToLocationsDelegate;
    
    private EndOperationDelegate onEndSendOMGNotificationToLocationsDelegate;
    
    private System.Threading.SendOrPostCallback onSendOMGNotificationToLocationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginAcknowledgeNotificationDelegate;
    
    private EndOperationDelegate onEndAcknowledgeNotificationDelegate;
    
    private System.Threading.SendOrPostCallback onAcknowledgeNotificationCompletedDelegate;
    
    private BeginOperationDelegate onBeginSendNotificationDelegate;
    
    private EndOperationDelegate onEndSendNotificationDelegate;
    
    private System.Threading.SendOrPostCallback onSendNotificationCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public OMGITServiceClient()
    {
    }
    
    public OMGITServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public OMGITServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public OMGITServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public OMGITServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
    
    public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
    
    public event System.EventHandler<RegisterForNotificationsCompletedEventArgs> RegisterForNotificationsCompleted;
    
    public event System.EventHandler<TestSendNotificationCompletedEventArgs> TestSendNotificationCompleted;
    
    public event System.EventHandler<ValidateAuthenticationTokenCompletedEventArgs> ValidateAuthenticationTokenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddLogMessageTickerAppCompleted;
    
    public event System.EventHandler<GetRecentMessagesCompletedEventArgs> GetRecentMessagesCompleted;
    
    public event System.EventHandler<GetValidSendLocationsCompletedEventArgs> GetValidSendLocationsCompleted;
    
    public event System.EventHandler<SendOMGNotificationToLocationsCompletedEventArgs> SendOMGNotificationToLocationsCompleted;
    
    public event System.EventHandler<AcknowledgeNotificationCompletedEventArgs> AcknowledgeNotificationCompleted;
    
    public event System.EventHandler<SendNotificationCompletedEventArgs> SendNotificationCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginLogin(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginLogin(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndLogin(System.IAsyncResult result)
    {
        return base.Channel.EndLogin(result);
    }
    
    private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginLogin(name, callback, asyncState);
    }
    
    private object[] OnEndLogin(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndLogin(result);
        return new object[] {
                retVal};
    }
    
    private void OnLoginCompleted(object state)
    {
        if ((this.LoginCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void LoginAsync(OMGITWebServices.OMGLoginData name)
    {
        this.LoginAsync(name, null);
    }
    
    public void LoginAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginLoginDelegate == null))
        {
            this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
        }
        if ((this.onEndLoginDelegate == null))
        {
            this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
        }
        if ((this.onLoginCompletedDelegate == null))
        {
            this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
        }
        base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                    name}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginLogout(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginLogout(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndLogout(System.IAsyncResult result)
    {
        return base.Channel.EndLogout(result);
    }
    
    private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginLogout(name, callback, asyncState);
    }
    
    private object[] OnEndLogout(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndLogout(result);
        return new object[] {
                retVal};
    }
    
    private void OnLogoutCompleted(object state)
    {
        if ((this.LogoutCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void LogoutAsync(OMGITWebServices.OMGLoginData name)
    {
        this.LogoutAsync(name, null);
    }
    
    public void LogoutAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginLogoutDelegate == null))
        {
            this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
        }
        if ((this.onEndLogoutDelegate == null))
        {
            this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
        }
        if ((this.onLogoutCompletedDelegate == null))
        {
            this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
        }
        base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                    name}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginRegisterForNotifications(OMGITWebServices.OMGInstallationData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRegisterForNotifications(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndRegisterForNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndRegisterForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginRegisterForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGInstallationData name = ((OMGITWebServices.OMGInstallationData)(inValues[0]));
        return ((IOMGITService)(this)).BeginRegisterForNotifications(name, callback, asyncState);
    }
    
    private object[] OnEndRegisterForNotifications(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndRegisterForNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnRegisterForNotificationsCompleted(object state)
    {
        if ((this.RegisterForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.RegisterForNotificationsCompleted(this, new RegisterForNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void RegisterForNotificationsAsync(OMGITWebServices.OMGInstallationData name)
    {
        this.RegisterForNotificationsAsync(name, null);
    }
    
    public void RegisterForNotificationsAsync(OMGITWebServices.OMGInstallationData name, object userState)
    {
        if ((this.onBeginRegisterForNotificationsDelegate == null))
        {
            this.onBeginRegisterForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginRegisterForNotifications);
        }
        if ((this.onEndRegisterForNotificationsDelegate == null))
        {
            this.onEndRegisterForNotificationsDelegate = new EndOperationDelegate(this.OnEndRegisterForNotifications);
        }
        if ((this.onRegisterForNotificationsCompletedDelegate == null))
        {
            this.onRegisterForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginRegisterForNotificationsDelegate, new object[] {
                    name}, this.onEndRegisterForNotificationsDelegate, this.onRegisterForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginTestSendNotification(OMGITWebServices.OMGAdminTestSendData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginTestSendNotification(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndTestSendNotification(System.IAsyncResult result)
    {
        return base.Channel.EndTestSendNotification(result);
    }
    
    private System.IAsyncResult OnBeginTestSendNotification(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGAdminTestSendData name = ((OMGITWebServices.OMGAdminTestSendData)(inValues[0]));
        return ((IOMGITService)(this)).BeginTestSendNotification(name, callback, asyncState);
    }
    
    private object[] OnEndTestSendNotification(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndTestSendNotification(result);
        return new object[] {
                retVal};
    }
    
    private void OnTestSendNotificationCompleted(object state)
    {
        if ((this.TestSendNotificationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.TestSendNotificationCompleted(this, new TestSendNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void TestSendNotificationAsync(OMGITWebServices.OMGAdminTestSendData name)
    {
        this.TestSendNotificationAsync(name, null);
    }
    
    public void TestSendNotificationAsync(OMGITWebServices.OMGAdminTestSendData name, object userState)
    {
        if ((this.onBeginTestSendNotificationDelegate == null))
        {
            this.onBeginTestSendNotificationDelegate = new BeginOperationDelegate(this.OnBeginTestSendNotification);
        }
        if ((this.onEndTestSendNotificationDelegate == null))
        {
            this.onEndTestSendNotificationDelegate = new EndOperationDelegate(this.OnEndTestSendNotification);
        }
        if ((this.onTestSendNotificationCompletedDelegate == null))
        {
            this.onTestSendNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSendNotificationCompleted);
        }
        base.InvokeAsync(this.onBeginTestSendNotificationDelegate, new object[] {
                    name}, this.onEndTestSendNotificationDelegate, this.onTestSendNotificationCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginValidateAuthenticationToken(OMGITWebServices.OMGAuthTokenData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginValidateAuthenticationToken(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndValidateAuthenticationToken(System.IAsyncResult result)
    {
        return base.Channel.EndValidateAuthenticationToken(result);
    }
    
    private System.IAsyncResult OnBeginValidateAuthenticationToken(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGAuthTokenData name = ((OMGITWebServices.OMGAuthTokenData)(inValues[0]));
        return ((IOMGITService)(this)).BeginValidateAuthenticationToken(name, callback, asyncState);
    }
    
    private object[] OnEndValidateAuthenticationToken(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndValidateAuthenticationToken(result);
        return new object[] {
                retVal};
    }
    
    private void OnValidateAuthenticationTokenCompleted(object state)
    {
        if ((this.ValidateAuthenticationTokenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ValidateAuthenticationTokenCompleted(this, new ValidateAuthenticationTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ValidateAuthenticationTokenAsync(OMGITWebServices.OMGAuthTokenData name)
    {
        this.ValidateAuthenticationTokenAsync(name, null);
    }
    
    public void ValidateAuthenticationTokenAsync(OMGITWebServices.OMGAuthTokenData name, object userState)
    {
        if ((this.onBeginValidateAuthenticationTokenDelegate == null))
        {
            this.onBeginValidateAuthenticationTokenDelegate = new BeginOperationDelegate(this.OnBeginValidateAuthenticationToken);
        }
        if ((this.onEndValidateAuthenticationTokenDelegate == null))
        {
            this.onEndValidateAuthenticationTokenDelegate = new EndOperationDelegate(this.OnEndValidateAuthenticationToken);
        }
        if ((this.onValidateAuthenticationTokenCompletedDelegate == null))
        {
            this.onValidateAuthenticationTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateAuthenticationTokenCompleted);
        }
        base.InvokeAsync(this.onBeginValidateAuthenticationTokenDelegate, new object[] {
                    name}, this.onEndValidateAuthenticationTokenDelegate, this.onValidateAuthenticationTokenCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAddLogMessageTickerApp(string logmessage, string msgdetail, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddLogMessageTickerApp(logmessage, msgdetail, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IOMGITService.EndAddLogMessageTickerApp(System.IAsyncResult result)
    {
        base.Channel.EndAddLogMessageTickerApp(result);
    }
    
    private System.IAsyncResult OnBeginAddLogMessageTickerApp(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string logmessage = ((string)(inValues[0]));
        string msgdetail = ((string)(inValues[1]));
        return ((IOMGITService)(this)).BeginAddLogMessageTickerApp(logmessage, msgdetail, callback, asyncState);
    }
    
    private object[] OnEndAddLogMessageTickerApp(System.IAsyncResult result)
    {
        ((IOMGITService)(this)).EndAddLogMessageTickerApp(result);
        return null;
    }
    
    private void OnAddLogMessageTickerAppCompleted(object state)
    {
        if ((this.AddLogMessageTickerAppCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddLogMessageTickerAppCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddLogMessageTickerAppAsync(string logmessage, string msgdetail)
    {
        this.AddLogMessageTickerAppAsync(logmessage, msgdetail, null);
    }
    
    public void AddLogMessageTickerAppAsync(string logmessage, string msgdetail, object userState)
    {
        if ((this.onBeginAddLogMessageTickerAppDelegate == null))
        {
            this.onBeginAddLogMessageTickerAppDelegate = new BeginOperationDelegate(this.OnBeginAddLogMessageTickerApp);
        }
        if ((this.onEndAddLogMessageTickerAppDelegate == null))
        {
            this.onEndAddLogMessageTickerAppDelegate = new EndOperationDelegate(this.OnEndAddLogMessageTickerApp);
        }
        if ((this.onAddLogMessageTickerAppCompletedDelegate == null))
        {
            this.onAddLogMessageTickerAppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLogMessageTickerAppCompleted);
        }
        base.InvokeAsync(this.onBeginAddLogMessageTickerAppDelegate, new object[] {
                    logmessage,
                    msgdetail}, this.onEndAddLogMessageTickerAppDelegate, this.onAddLogMessageTickerAppCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetRecentMessages(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRecentMessages(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string[] IOMGITService.EndGetRecentMessages(System.IAsyncResult result)
    {
        return base.Channel.EndGetRecentMessages(result);
    }
    
    private System.IAsyncResult OnBeginGetRecentMessages(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((IOMGITService)(this)).BeginGetRecentMessages(callback, asyncState);
    }
    
    private object[] OnEndGetRecentMessages(System.IAsyncResult result)
    {
        string[] retVal = ((IOMGITService)(this)).EndGetRecentMessages(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetRecentMessagesCompleted(object state)
    {
        if ((this.GetRecentMessagesCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetRecentMessagesCompleted(this, new GetRecentMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetRecentMessagesAsync()
    {
        this.GetRecentMessagesAsync(null);
    }
    
    public void GetRecentMessagesAsync(object userState)
    {
        if ((this.onBeginGetRecentMessagesDelegate == null))
        {
            this.onBeginGetRecentMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetRecentMessages);
        }
        if ((this.onEndGetRecentMessagesDelegate == null))
        {
            this.onEndGetRecentMessagesDelegate = new EndOperationDelegate(this.OnEndGetRecentMessages);
        }
        if ((this.onGetRecentMessagesCompletedDelegate == null))
        {
            this.onGetRecentMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecentMessagesCompleted);
        }
        base.InvokeAsync(this.onBeginGetRecentMessagesDelegate, null, this.onEndGetRecentMessagesDelegate, this.onGetRecentMessagesCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetValidSendLocations(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, string> IOMGITService.EndGetValidSendLocations(System.IAsyncResult result)
    {
        return base.Channel.EndGetValidSendLocations(result);
    }
    
    private System.IAsyncResult OnBeginGetValidSendLocations(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginGetValidSendLocations(name, callback, asyncState);
    }
    
    private object[] OnEndGetValidSendLocations(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, string> retVal = ((IOMGITService)(this)).EndGetValidSendLocations(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetValidSendLocationsCompleted(object state)
    {
        if ((this.GetValidSendLocationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetValidSendLocationsCompleted(this, new GetValidSendLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetValidSendLocationsAsync(OMGITWebServices.OMGLoginData name)
    {
        this.GetValidSendLocationsAsync(name, null);
    }
    
    public void GetValidSendLocationsAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetValidSendLocationsDelegate == null))
        {
            this.onBeginGetValidSendLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetValidSendLocations);
        }
        if ((this.onEndGetValidSendLocationsDelegate == null))
        {
            this.onEndGetValidSendLocationsDelegate = new EndOperationDelegate(this.OnEndGetValidSendLocations);
        }
        if ((this.onGetValidSendLocationsCompletedDelegate == null))
        {
            this.onGetValidSendLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetValidSendLocationsCompleted);
        }
        base.InvokeAsync(this.onBeginGetValidSendLocationsDelegate, new object[] {
                    name}, this.onEndGetValidSendLocationsDelegate, this.onGetValidSendLocationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginSendOMGNotificationToLocations(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSendOMGNotificationToLocations(msg, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndSendOMGNotificationToLocations(System.IAsyncResult result)
    {
        return base.Channel.EndSendOMGNotificationToLocations(result);
    }
    
    private System.IAsyncResult OnBeginSendOMGNotificationToLocations(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLocationNotificationMessage msg = ((OMGITWebServices.OMGLocationNotificationMessage)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginSendOMGNotificationToLocations(msg, loginData, callback, asyncState);
    }
    
    private object[] OnEndSendOMGNotificationToLocations(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndSendOMGNotificationToLocations(result);
        return new object[] {
                retVal};
    }
    
    private void OnSendOMGNotificationToLocationsCompleted(object state)
    {
        if ((this.SendOMGNotificationToLocationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SendOMGNotificationToLocationsCompleted(this, new SendOMGNotificationToLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void SendOMGNotificationToLocationsAsync(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData)
    {
        this.SendOMGNotificationToLocationsAsync(msg, loginData, null);
    }
    
    public void SendOMGNotificationToLocationsAsync(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginSendOMGNotificationToLocationsDelegate == null))
        {
            this.onBeginSendOMGNotificationToLocationsDelegate = new BeginOperationDelegate(this.OnBeginSendOMGNotificationToLocations);
        }
        if ((this.onEndSendOMGNotificationToLocationsDelegate == null))
        {
            this.onEndSendOMGNotificationToLocationsDelegate = new EndOperationDelegate(this.OnEndSendOMGNotificationToLocations);
        }
        if ((this.onSendOMGNotificationToLocationsCompletedDelegate == null))
        {
            this.onSendOMGNotificationToLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendOMGNotificationToLocationsCompleted);
        }
        base.InvokeAsync(this.onBeginSendOMGNotificationToLocationsDelegate, new object[] {
                    msg,
                    loginData}, this.onEndSendOMGNotificationToLocationsDelegate, this.onSendOMGNotificationToLocationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAcknowledgeNotification(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAcknowledgeNotification(msgConfirmID, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndAcknowledgeNotification(System.IAsyncResult result)
    {
        return base.Channel.EndAcknowledgeNotification(result);
    }
    
    private System.IAsyncResult OnBeginAcknowledgeNotification(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string msgConfirmID = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginAcknowledgeNotification(msgConfirmID, loginData, callback, asyncState);
    }
    
    private object[] OnEndAcknowledgeNotification(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndAcknowledgeNotification(result);
        return new object[] {
                retVal};
    }
    
    private void OnAcknowledgeNotificationCompleted(object state)
    {
        if ((this.AcknowledgeNotificationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AcknowledgeNotificationCompleted(this, new AcknowledgeNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AcknowledgeNotificationAsync(string msgConfirmID, OMGITWebServices.OMGLoginData loginData)
    {
        this.AcknowledgeNotificationAsync(msgConfirmID, loginData, null);
    }
    
    public void AcknowledgeNotificationAsync(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginAcknowledgeNotificationDelegate == null))
        {
            this.onBeginAcknowledgeNotificationDelegate = new BeginOperationDelegate(this.OnBeginAcknowledgeNotification);
        }
        if ((this.onEndAcknowledgeNotificationDelegate == null))
        {
            this.onEndAcknowledgeNotificationDelegate = new EndOperationDelegate(this.OnEndAcknowledgeNotification);
        }
        if ((this.onAcknowledgeNotificationCompletedDelegate == null))
        {
            this.onAcknowledgeNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcknowledgeNotificationCompleted);
        }
        base.InvokeAsync(this.onBeginAcknowledgeNotificationDelegate, new object[] {
                    msgConfirmID,
                    loginData}, this.onEndAcknowledgeNotificationDelegate, this.onAcknowledgeNotificationCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginSendNotification(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSendNotification(sendData, sender, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndSendNotification(System.IAsyncResult result)
    {
        return base.Channel.EndSendNotification(result);
    }
    
    private System.IAsyncResult OnBeginSendNotification(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGPushNotificationSendData sendData = ((OMGITWebServices.OMGPushNotificationSendData)(inValues[0]));
        OMGITWebServices.OMGLoginData sender = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginSendNotification(sendData, sender, callback, asyncState);
    }
    
    private object[] OnEndSendNotification(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndSendNotification(result);
        return new object[] {
                retVal};
    }
    
    private void OnSendNotificationCompleted(object state)
    {
        if ((this.SendNotificationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SendNotificationCompleted(this, new SendNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void SendNotificationAsync(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender)
    {
        this.SendNotificationAsync(sendData, sender, null);
    }
    
    public void SendNotificationAsync(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, object userState)
    {
        if ((this.onBeginSendNotificationDelegate == null))
        {
            this.onBeginSendNotificationDelegate = new BeginOperationDelegate(this.OnBeginSendNotification);
        }
        if ((this.onEndSendNotificationDelegate == null))
        {
            this.onEndSendNotificationDelegate = new EndOperationDelegate(this.OnEndSendNotification);
        }
        if ((this.onSendNotificationCompletedDelegate == null))
        {
            this.onSendNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendNotificationCompleted);
        }
        base.InvokeAsync(this.onBeginSendNotificationDelegate, new object[] {
                    sendData,
                    sender}, this.onEndSendNotificationDelegate, this.onSendNotificationCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override IOMGITService CreateChannel()
    {
        return new OMGITServiceClientChannel(this);
    }
    
    private class OMGITServiceClientChannel : ChannelBase<IOMGITService>, IOMGITService
    {
        
        public OMGITServiceClientChannel(System.ServiceModel.ClientBase<IOMGITService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginLogin(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndLogin(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("Login", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginLogout(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndLogout(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("Logout", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginRegisterForNotifications(OMGITWebServices.OMGInstallationData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("RegisterForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndRegisterForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("RegisterForNotifications", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginTestSendNotification(OMGITWebServices.OMGAdminTestSendData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("TestSendNotification", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndTestSendNotification(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("TestSendNotification", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginValidateAuthenticationToken(OMGITWebServices.OMGAuthTokenData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("ValidateAuthenticationToken", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndValidateAuthenticationToken(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("ValidateAuthenticationToken", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddLogMessageTickerApp(string logmessage, string msgdetail, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = logmessage;
            _args[1] = msgdetail;
            System.IAsyncResult _result = base.BeginInvoke("AddLogMessageTickerApp", _args, callback, asyncState);
            return _result;
        }
        
        public void EndAddLogMessageTickerApp(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("AddLogMessageTickerApp", _args, result);
        }
        
        public System.IAsyncResult BeginGetRecentMessages(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetRecentMessages", _args, callback, asyncState);
            return _result;
        }
        
        public string[] EndGetRecentMessages(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string[] _result = ((string[])(base.EndInvoke("GetRecentMessages", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetValidSendLocations", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, string> EndGetValidSendLocations(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetValidSendLocations", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginSendOMGNotificationToLocations(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = msg;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("SendOMGNotificationToLocations", _args, callback, asyncState);
            return _result;
        }
        
        public int EndSendOMGNotificationToLocations(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("SendOMGNotificationToLocations", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAcknowledgeNotification(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = msgConfirmID;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("AcknowledgeNotification", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndAcknowledgeNotification(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("AcknowledgeNotification", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginSendNotification(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = sendData;
            _args[1] = sender;
            System.IAsyncResult _result = base.BeginInvoke("SendNotification", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndSendNotification(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("SendNotification", _args, result)));
            return _result;
        }
    }
}
